     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, scanf, printf
     5                                  import exit msvcrt.dll
     6                                  import scanf msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  
     9                                  
    10                                  segment data use32 class = data
    11 00000000 0000<rept>                  cuv times 20 db 0, 0
    12 00000028 00000000                    number dd 0
    13 0000002C 0000<rept>                  ans times 40 db 0, 0
    14                                      
    15 0000007C 257300                      r_format_str db "%s", 0
    16 0000007F 256400                      r_format_dec db "%d", 0
    17 00000082 257300                      w_format_str db "%s", 0
    18                                      
    19 00000085 14000000                    divider dd 20
    20 00000089 00                          adder db 0
    21 0000008A 6165696F754145494F-         voc db "aeiouAEIOU", 0
    21 00000093 5500               
    22 00000095 00000000                    is_voc dd 0
    23                                      
    24                                  
    25                                  segment code use32 class = code
    26                                      start:
    27 00000000 68[00000000]                    push dword cuv
    28 00000005 68[7C000000]                    push dword r_format_str
    29 0000000A FF15[00000000]                  call [scanf]
    30 00000010 83C408                          add esp, 4 * 2
    31                                          
    32 00000013 68[28000000]                    push dword number
    33 00000018 68[7F000000]                    push dword r_format_dec
    34 0000001D FF15[00000000]                  call [scanf]
    35 00000023 83C408                          add esp, 4 * 2
    36                                          
    37 00000026 BE00000000                      mov esi, 0
    38 0000002B BF00000000                      mov edi, 0
    39                                          
    40 00000030 F705[28000000]0100-             test dword [number], 01h
    40 00000038 0000               
    41 0000003A 7432                            jz is_par
    42                                          
    43 0000003C A1[28000000]                    mov eax, [number]
    44 00000041 BA00000000                      mov edx, 0
    45 00000046 F735[85000000]                  div dword [divider]
    46 0000004C 8815[89000000]                  mov [adder], dl
    47                                          
    48                                          rep_1:
    49 00000052 8A86[00000000]                      mov al, [cuv + esi]
    50 00000058 3C00                                cmp al, 0
    51 0000005A 7410                                je exit_rep_1
    52                                              
    53 0000005C 0205[89000000]                      add al, [adder]
    54 00000062 8887[2C000000]                      mov [ans + edi], al
    55                                              
    56 00000068 46                                  inc esi
    57 00000069 47                                  inc edi
    58 0000006A EBE6                                jmp rep_1
    59                                          
    60                                          exit_rep_1:
    61 0000006C EB63                            jmp skipper
    62                                          
    63                                          is_par:
    64                                          rep_2:
    65 0000006E C705[95000000]0000-                 mov dword [is_voc], 0
    65 00000076 0000               
    66 00000078 8A86[00000000]                      mov al, [cuv + esi]
    67 0000007E 3C00                                cmp al, 0
    68 00000080 744F                                je exit_rep_2
    69                                              
    70 00000082 BB00000000                          mov ebx, 0
    71                                              
    72                                              rep_3:
    73 00000087 8A8B[8A000000]                          mov cl, [voc + ebx]
    74 0000008D 80F900                                  cmp cl, 0
    75 00000090 7411                                    je exit_rep_3
    76                                                  
    77 00000092 38C8                                    cmp al, cl
    78 00000094 750A                                    jne not_eq
    79                                              
    80 00000096 C705[95000000]0100-                     mov dword [is_voc], 1
    80 0000009E 0000               
    81                                              
    82                                                  not_eq:
    83 000000A0 43                                      inc ebx
    84 000000A1 EBE4                                    jmp rep_3
    85                                                  
    86                                              exit_rep_3:
    87 000000A3 F705[95000000]0100-                 test dword [is_voc], 01h
    87 000000AB 0000               
    88 000000AD 7518                                jnz impar
    89                                              
    90 000000AF 8887[2C000000]                      mov [ans + edi], al
    91 000000B5 47                                  inc edi
    92 000000B6 C687[2C000000]70                    mov [ans + edi], byte 'p'
    93 000000BD 47                                  inc edi
    94 000000BE 8887[2C000000]                      mov [ans + edi], al
    95 000000C4 47                                  inc edi
    96 000000C5 EB07                                jmp jump_over
    97                                              
    98                                              impar:
    99 000000C7 8887[2C000000]                      mov [ans + edi], al
   100 000000CD 47                                  inc edi
   101                                              
   102                                              jump_over:
   103 000000CE 46                                  inc esi
   104 000000CF EB9D                                jmp rep_2
   105                                          
   106                                          exit_rep_2:
   107                                          skipper:
   108 000000D1 68[2C000000]                    push dword ans
   109 000000D6 68[82000000]                    push dword w_format_str
   110 000000DB FF15[00000000]                  call [printf]
   111 000000E1 83C408                          add esp, 4 * 2
   112                                          
   113 000000E4 6A00                            push dword 0
   114 000000E6 FF15[00000000]                  call [exit]
