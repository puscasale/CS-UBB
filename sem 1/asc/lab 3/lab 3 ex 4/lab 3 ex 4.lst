     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  
     7                                  import exit msvcrt.dll
     8                                  
     9                                  segment data use32 class=data
    10                                   
    11 00000000 03                          b db 3
    12 00000001 02                          c db 2
    13 00000002 09000000                    a dd 9
    14 00000006 1400000000000000            x dq 20
    15                                    ; (a+b)/(2-b*b+b/c)-x
    16                                    ; cu semn
    17                                   
    18                                   segment code use32 class=code
    19                                  start:
    20                                  
    21                                      ; b*b 
    22 00000000 8A1D[00000000]              mov bl, [b]
    23 00000006 A0[00000000]                mov al, [b]
    24 0000000B 6698                        cbw; ax = b
    25 0000000D F6EB                        imul bl;  ax = b * b 
    26 0000000F 6689C3                      mov bx, ax; bx = b * b
    27                                      
    28                                      ;b/c 
    29 00000012 A0[00000000]                mov al, [b]
    30 00000017 6698                        cbw; ax = b
    31 00000019 8A0D[01000000]              mov cl, [c]
    32 0000001F F6F9                        idiv cl; al = b / c
    33 00000021 6698                        cbw; ax = b / c
    34                                      
    35                                      ;(2-b*b+b/c)
    36 00000023 66B90200                    mov cx, 2
    37 00000027 6629D9                      sub cx, bx; cx = 2 - b * b 
    38 0000002A 6601C1                      add cx, ax; cx = 2 - b * b + b / c
    39                                      
    40                                      
    41                                      ;a + b
    42 0000002D A0[00000000]                mov al, [b]
    43 00000032 6698                        cbw;  ax = b 
    44 00000034 6699                        cwd; eax = b
    45 00000036 0305[02000000]              add eax, [a]; eax = a + b
    46                                      
    47                                      ;(a+b)/(2-b*b+b/c)
    48 0000003C 66F7F9                      idiv cx; ax = (a+b)/(2-b*b+b/c)
    49 0000003F 98                          cwde; eax = (a+b)/(2-b*b+b/c)
    50                                      
    51                                      ;(a+b)/(2-b*b+b/c)-x
    52 00000040 99                          cdq; edx:eax = (a+b)/(2-b*b+b/c)
    53 00000041 8B1D[06000000]              mov ebx, dword[x + 0]
    54 00000047 8B0D[0A000000]              mov ecx, dword[x + 4]; ecx:ebx = x
    55 0000004D F8                          clc 
    56 0000004E 29D8                        sub eax, ebx 
    57 00000050 19CA                        sbb edx, ecx; ecx:ebx = (a+b)/(2-b*b+b/c)-x
    58                                  
    59 00000052 6A00                    push dword 0
    60 00000054 FF15[00000000]          call [exit]
