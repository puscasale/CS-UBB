        -:    0:Source:C:/Users/Ale/Desktop/oop/lab2-4/functions.c
        -:    0:Graph:C:\Users\Ale\Desktop\oop\lab2-4\cmake-build-debug-coverage\CMakeFiles\lab2_4.dir\functions.c.gcno
        -:    0:Data:C:\Users\Ale\Desktop\oop\lab2-4\cmake-build-debug-coverage\CMakeFiles\lab2_4.dir\functions.c.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <ctype.h>
        -:    4:#include <stdbool.h>
        -:    5:#include "functions.h"
        -:    6:
        -:    7:/*
        -:    8: * Creeaza o lista goala de medicamnete
        -:    9: * return: lista
        -:   10: */
function create_list called 8 returned 100% blocks executed 100%
        8:   11:Medicament_list create_list(){
        -:   12:    Medicament_list medicamente;
        8:   13:    medicamente.lungime = 0;
        8:   14:    return medicamente;
        8:   14-block  0
        -:   15:}
        -:   16:
function get_size called 12 returned 100% blocks executed 100%
       12:   17:int get_size(Medicament_list *medicamente){
       12:   18:    return medicamente->lungime;
       12:   18-block  0
        -:   19:}
        -:   20:
        -:   21:/*
        -:   22: * Gaseste un medicamnetu dupa codul dat
        -:   23: * medicamente: lista de medicamente
        -:   24: * cod: codul dat
        -:   25: * return: medicamentul daca exista, medicament neexistent daca nu exista un medicamnet cu acest cod
        -:   26: */
function get_medicament called 3 returned 100% blocks executed 100%
        3:   27:Medicament get_medicament(Medicament_list *medicamente, int cod) {
        4:   28:    for (int i = 0; i < medicamente->lungime; i++) {
        3:   28-block  0
        1:   28-block  1
        4:   28-block  2
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:   29:        if (medicamente->nr[i].cod == cod) {
        2:   29-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   30:            return medicamente->nr[i];
        1:   30-block  0
        -:   31:        }
        -:   32:    }
        2:   33:    Medicament medicamentNeexistent = {-1, "", 0, 0};
        2:   34:    return medicamentNeexistent;
        2:   34-block  0
        -:   35:}
        -:   36:
        -:   37:/*
        -:   38: * Settere
        -:   39: */
function set_cod called 16 returned 100% blocks executed 100%
       16:   40:void set_cod(Medicament *medicament, int cod){
       16:   41:    medicament->cod = cod;
       16:   42:}
        -:   43:
function set_nume called 16 returned 100% blocks executed 100%
       16:   44:void set_nume(Medicament *medicament, char nume[]){
       16:   45:    strcpy(medicament->nume, nume);
       16:   46:}
        -:   47:
function set_concentratie called 16 returned 100% blocks executed 100%
       16:   48:void set_concentratie(Medicament *medicament, int concentratie){
       16:   49:    medicament->concentratie = concentratie;
       16:   50:}
        -:   51:
function set_cantitate called 16 returned 100% blocks executed 100%
       16:   52:void set_cantitate(Medicament *medicament, int cantitate){
       16:   53:    medicament->cantitate = cantitate;
       16:   54:}
        -:   55:
        -:   56:/*
        -:   57: * Gettere
        -:   58: */
function get_cod called 8 returned 100% blocks executed 100%
        8:   59:int get_cod(Medicament *medicament){
        8:   60:    return medicament->cod;
        8:   60-block  0
        -:   61:}
        -:   62:
function get_nume called 8 returned 100% blocks executed 100%
        8:   63:char* get_nume(Medicament *medicament){
        8:   64:    return medicament->nume;
        8:   64-block  0
        -:   65:}
        -:   66:
function get_concentratie called 15 returned 100% blocks executed 100%
       15:   67:int get_concentratie(Medicament *medicament){
       15:   68:    return medicament->concentratie;
       15:   68-block  0
        -:   69:}
        -:   70:
function get_cantitate called 8 returned 100% blocks executed 100%
        8:   71:int get_cantitate(Medicament *medicament){
        8:   72:    return medicament->cantitate;
        8:   72-block  0
        -:   73:}
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        -:   78:/*
        -:   79: * Creaza un medicamet nou
        -:   80: * cod: codul unic al medicamentului
        -:   81: * nume: numele medicamentului
        -:   82: * concentratie: concentratia medicamentului
        -:   83: * cantitate: cantitatea de medicament
        -:   84: */
function create_medicament called 16 returned 100% blocks executed 100%
       16:   85:Medicament create_medicament(int cod, char nume[], int concentratie, int cantitate){
        -:   86:    Medicament new_medicamet;
       16:   87:    set_cod(&new_medicamet, cod);
       16:   87-block  0
call    0 returned 16
       16:   88:    set_nume(&new_medicamet, nume);
call    0 returned 16
       16:   89:    set_concentratie(&new_medicamet, concentratie);
call    0 returned 16
       16:   90:    set_cantitate(&new_medicamet, cantitate);
call    0 returned 16
       16:   91:    return new_medicamet;
        -:   92:}
        -:   93:
        -:   94:/*
        -:   95: * Verificada daca doua coduri sunt identice
        -:   96: * cod1: un cod
        -:   97: * cod2: un cod
        -:   98: * return: true daca doua coduri sunt identice, fals in caz contrar
        -:   99: */
        -:  100:/*
        -:  101:bool equal_cod(int cod1, int cod2){
        -:  102:    if(cod1 == cod2)
        -:  103:        return true;
        -:  104:    return false;
        -:  105:}
        -:  106:*/
        -:  107:/*
        -:  108: * Validare medicament
        -:  109: * medicamente: lista de medicamente
        -:  110: * medicament: un medicament
        -:  111: * err: lisat de erori
        -:  112: */
function valid called 7 returned 100% blocks executed 100%
        7:  113:bool valid(Medicament_list *medicamente, Medicament new_medicamnet, char err[5][100], int *len){
        7:  114:    (*len) = 0;
        7:  115:    int ok =0;
        7:  116:    int cod = get_cod(&new_medicamnet);
        7:  116-block  0
call    0 returned 7
       11:  117:    for( int i = 0; i< medicamente->lungime; i++){
        4:  117-block  0
       11:  117-block  1
branch  0 taken 5
branch  1 taken 6 (fallthrough)
        5:  118:        if(medicamente->nr[i].cod == cod){
        5:  118-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  119:            ok = 1;
        1:  120:            break;
        1:  120-block  0
        -:  121:        }
        -:  122:    }
        7:  123:    if(ok == 1){
        7:  123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:  124:        strcpy(err[*len], "Exista deja un medicamnet cu acest cod\n");
        1:  125:        (*len)++;
        1:  125-block  0
        -:  126:    }
        7:  127:    if(cod < 1){
        7:  127-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:  128:        strcpy(err[*len], "Codul trebuei sa fie un numar mai mare sau egal cu 1\n");
        1:  129:        (*len)++;
        1:  129-block  0
        -:  130:    }
        -:  131:
        -:  132:
        7:  133:    char* nume = get_nume(&new_medicamnet);
        7:  133-block  0
call    0 returned 7
       32:  134:    for( int i =0; i < strlen(nume); i++)
       25:  134-block  0
       32:  134-block  1
branch  0 taken 28
branch  1 taken 4 (fallthrough)
       28:  135:        if(isalpha(nume[i]) == 0){
       28:  135-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 25
        3:  136:            strcpy(err[*len], "Numele trebuie sa contina doar litere\n");
        3:  137:            (*len)++;
        3:  138:            break;
        3:  138-block  0
        -:  139:        }
        -:  140:
        7:  141:    if(get_concentratie(&new_medicamnet) <=0 || get_concentratie(&new_medicamnet) >= 100){
        7:  141-block  0
call    0 returned 7
branch  1 taken 6 (fallthrough)
branch  2 taken 1
        6:  141-block  1
call    3 returned 6
branch  4 taken 0 (fallthrough)
branch  5 taken 6
        1:  142:        strcpy(err[*len], "Concentratia trebuie sa fie un numar intre 1 si 100\n");
        1:  143:        (*len)++;
        1:  143-block  0
        -:  144:    }
        7:  145:    if(get_cantitate(&new_medicamnet)<0){
        7:  145-block  0
call    0 returned 7
branch  1 taken 1 (fallthrough)
branch  2 taken 6
        1:  146:        strcpy(err[*len], "Cantitatea nu poate sa fie mai mica decat 0\n");
        1:  147:        (*len)++;
        1:  147-block  0
        -:  148:    }
        7:  149:    if(*len)
        7:  149-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 3
        4:  150:        return false;
        4:  150-block  0
        3:  151:    return true;
        3:  151-block  0
        -:  152:}
function valid_new_name called 3 returned 100% blocks executed 100%
        3:  153:bool valid_new_name(char* nume, char err[5][100], int *len){
        3:  154:    (*len) = 0;
       18:  155:    for( int i =0; i < strlen(nume); i++)
        3:  155-block  0
       15:  155-block  1
       18:  155-block  2
branch  0 taken 17
branch  1 taken 1 (fallthrough)
       17:  156:        if(isalpha(nume[i]) == 0){
       17:  156-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 15
        2:  157:            strcpy(err[*len], "Numele trebuie sa contina doar litere");
        2:  158:            (*len)++;
        2:  159:            break;
        2:  159-block  0
        -:  160:        }
        3:  161:    if(*len)
        3:  161-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  162:        return false;
        2:  162-block  0
        1:  163:    return true;
        1:  163-block  0
        -:  164:}
        -:  165:
function valid_new_concentratie called 2 returned 100% blocks executed 100%
        2:  166:bool valid_new_concentratie(int concentratie, char err[5][100], int *len){
        2:  167:    (*len) = 0;
        2:  168:    if(concentratie <=0 || concentratie >= 100) {
        2:  168-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  168-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        1:  169:        strcpy(err[*len], "Concentratia trebuie sa fie un numar intre 1 si 100");
        1:  170:        (*len)++;
        1:  170-block  0
        -:  171:    }
        2:  172:    if(*len)
        2:  172-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  173:        return false;
        1:  173-block  0
        1:  174:    return true;
        1:  174-block  0
        -:  175:}
        -:  176:
        -:  177://Repo
        -:  178:
        -:  179:/*
        -:  180: * Adauga un medicamnet in lista
        -:  181: * medicamnete: lisat de medicamente
        -:  182: * new_medicamnet: noul medicamnet pe care vrem sa il adaugam
        -:  183: */
function add called 12 returned 100% blocks executed 100%
       12:  184:void add(Medicament_list *medicamente, Medicament new_medicamnet){
       12:  185:    medicamente->nr[medicamente->lungime] = new_medicamnet;
       12:  186:    medicamente->lungime++;
       12:  187:}
        -:  188:
        -:  189:/*
        -:  190: * Sterge un medicamnet dupa codul dat
        -:  191: * medicamente: lista de medicamente
        -:  192: * cod: codul unic al medicamentului
        -:  193: */
function delete called 3 returned 100% blocks executed 100%
        3:  194:void delete(Medicament_list *medicamente, int cod){
        7:  195:    for( int i = 0; i< medicamente->lungime; i++){
        3:  195-block  0
        4:  195-block  1
        7:  195-block  2
branch  0 taken 4
branch  1 taken 3 (fallthrough)
        4:  196:        if(medicamente->nr[i].cod == cod){
        4:  196-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        6:  197:            for( int j = i; j < medicamente->lungime - 1; j++){
        3:  197-block  0
        6:  197-block  1
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        3:  198:                medicamente->nr[i] = medicamente->nr[i+1];
        3:  198-block  0
        -:  199:            }
        3:  200:            medicamente->lungime--;
        3:  200-block  0
        -:  201:        }
        -:  202:    }
        3:  203:}
        -:  204:
        -:  205:/*
        -:  206:void update(Medicament_list *medicamente, Medicament up_medicament, int cod){
        -:  207:    for( int i =0; i < medicamente->lungime; i++){
        -:  208:        if(medicamente->nr[i].cod == cod){
        -:  209:            medicamente->nr[i] = up_medicament;
        -:  210:        }
        -:  211:    }
        -:  212:}
        -:  213:*/
        -:  214:
        -:  215:
        -:  216://Service
        -:  217:
        -:  218:
        -:  219:/*
        -:  220: * Adauga un medicamnet valid in lista
        -:  221: * medicamente: lista de medicamente
        -:  222: * cod: codul medicamnetului
        -:  223: * nume: numele medicamentului
        -:  224: * concentratie: concentratia medicamentului
        -:  225: * cantitate: cantitatea medicamentului
        -:  226: * err: lista de erori
        -:  227: * len: lungimea listei de erori
        -:  228: */
function add_medicament called 4 returned 100% blocks executed 100%
        4:  229:void add_medicament(Medicament_list *medicamente, int cod, char nume[], int concentratie, int cantitate, char err[5][100], int *len){
        4:  230:    Medicament new_medicamnet = create_medicament(cod, nume, concentratie, cantitate);
        4:  230-block  0
call    0 returned 4
        4:  231:    if(valid(medicamente, new_medicamnet, err, len))
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        2:  232:        add(medicamente, new_medicamnet);
        2:  232-block  0
call    0 returned 2
        4:  233:}
        -:  234:
        -:  235:/*
        -:  236:void modificare_medicament(Medicament_list *medicamente, int cod, char new_name[], int new_concentratie, char err[5][100], int *len){
        -:  237:    Medicament medicament = get_medicament(medicamente, cod);
        -:  238:    if(medicament.cod == -1){
        -:  239:        strcpy(err[*len], "Nu exista acest medicament");
        -:  240:        (*len)++;
        -:  241:    }
        -:  242:    else{
        -:  243:        if(valid_new_name(new_name, err, len) && valid_new_concentratie(new_concentratie, err, len)){
        -:  244:            set_nume(&medicament, new_name);
        -:  245:            set_concentratie(&medicament, new_concentratie);
        -:  246:        }
        -:  247:    }
        -:  248:}
        -:  249: */
        -:  250:/*
        -:  251:* Modifica numele si concentaria unui medicamnet dat dupa cod
        -:  252:* medicamente: lista de medicamente
        -:  253:* cod: codul medicamnetului pe care vrem sa il modificam
        -:  254:* new_name: noul nume
        -:  255:* new_concentartie: noua concentratie
        -:  256:*/
        -:  257:
function modificare_medicament called 1 returned 100% blocks executed 62%
        1:  258:void modificare_medicament(Medicament_list *medicamente, int cod, char new_name[], int new_concentratie, char err[5][100], int *len) {
        1:  259:    Medicament *medicament = NULL;
       1*:  260:    for (int i = 0; i < medicamente->lungime; i++) {
        1:  260-block  0
    %%%%%:  260-block  1
        1:  260-block  2
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        1:  261:        if (medicamente->nr[i].cod == cod) {
        1:  261-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  262:            medicament = &medicamente->nr[i];
        1:  263:            break;
        1:  263-block  0
        -:  264:        }
        -:  265:    }
        1:  266:    if(medicament != NULL)
        1:  266-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
       1*:  267:        if (valid_new_name(new_name, err, len) && valid_new_concentratie(new_concentratie, err, len)) {
        1:  267-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  267-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  268:            set_nume(medicament, new_name);
    %%%%%:  268-block  0
call    0 never executed
    #####:  269:            set_concentratie(medicament, new_concentratie);
call    0 never executed
        -:  270:        }
        -:  271:
        1:  272:}
        -:  273:
        -:  274:
        -:  275:/*
        -:  276: * Sterge un medicament din lista dupa codul dat
        -:  277: * medicamenete: lista de medicamente
        -:  278: * cod: codul dat
        -:  279: * err: lista de erori
        -:  280: * len: lungimea listei de erori
        -:  281: */
function delete_medicament called 3 returned 100% blocks executed 100%
        3:  282:void delete_medicament(Medicament_list *medicamente, int cod, char err[5][100], int *len){
        -:  283:    Medicament medicament;
        3:  284:    medicament = get_medicament(medicamente, cod);
        3:  284-block  0
call    0 returned 3
        3:  285:    if(get_size(medicamente) == 0){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:  286:        strcpy(err[*len], "Nu exista niciun medicament");
        1:  287:        (*len)++;
        1:  287-block  0
        -:  288:    }
        2:  289:    else if(medicament.cod == -1){
        2:  289-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  290:        strcpy(err[*len], "Nu exista acest medicament");
        1:  291:        (*len)++;
        1:  291-block  0
        -:  292:    }
        -:  293:    else
        1:  294:        delete(medicamente, cod);
        1:  294-block  0
call    0 returned 1
        3:  295:}
        -:  296:
        -:  297:
