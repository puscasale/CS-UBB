        -:    0:Source:C:/Users/Ale/Desktop/oop/lab2_4_dinamic/med.c
        -:    0:Graph:C:\Users\Ale\Desktop\oop\lab2_4_dinamic\cmake-build-debug-coverage\CMakeFiles\lab2_4_dinamic.dir\med.c.gcno
        -:    0:Data:C:\Users\Ale\Desktop\oop\lab2_4_dinamic\cmake-build-debug-coverage\CMakeFiles\lab2_4_dinamic.dir\med.c.gcda
        -:    0:Runs:1
        -:    1:#include "med.h"
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <ctype.h>
        -:    6:
        -:    7:/*
        -:    8: * Creeaza o entitate de tipul Med
        -:    9: * param id: idul entitatii (int)
        -:   10: * param name: numele entitatii (char)
        -:   11: * param concentration: concentratia entitatii (int)
        -:   12: * param stock: stocul (int)
        -:   13: * return: Med
        -:   14: */
function create called 40 returned 100% blocks executed 100%
       40:   15:Med create(int id, char *name, int concentration, int stock){
        -:   16:    Med new;
       40:   17:    new.id = id;
        -:   18:
       40:   19:    int nr = strlen(name) + 1;
       40:   20:    new.name = malloc(nr);
       40:   21:    strcpy(new.name, name);
        -:   22:
       40:   23:    new.concentration = concentration;
       40:   24:    new.stock = stock;
        -:   25:
       40:   26:    return new;
       40:   26-block  0
        -:   27:}
        -:   28:
        -:   29:/*
        -:   30: * Dealoca memoria ocupata de o entitate Med
        -:   31: */
function destroy called 40 returned 100% blocks executed 100%
       40:   32:void destroy(Med *m){
       40:   33:    m->id = -1;
       40:   34:    free(m->name);
       40:   35:    m->concentration = -1;
       40:   36:    m->stock = -1;
       40:   37:}
        -:   38:
        -:   39:
function containsOnlyLetters called 23 returned 100% blocks executed 100%
       23:   40:int containsOnlyLetters(const char *str) {
      142:   41:    while (*str) {
       23:   41-block  0
      142:   41-block  1
branch  0 taken 121
branch  1 taken 21 (fallthrough)
      121:   42:        if (!isalpha(*str)) {
      121:   42-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 119
        2:   43:            return 0; // Not a letter
        2:   43-block  0
        -:   44:        }
      119:   45:        str++;
      119:   45-block  0
        -:   46:    }
       21:   47:    return 1; // Only contains letters
       21:   47-block  0
        -:   48:}
        -:   49:
        -:   50:/*
        -:   51: * Valideaza entitatea Med
        -:   52: * return: 1 - id invalid
        -:   53: *         2 - nume invalid
        -:   54: *         3 - concentratie invalida
        -:   55: *         4 - stock ivalid
        -:   56: *         0 - entitate valida
        -:   57: */
function validate called 24 returned 100% blocks executed 100%
       24:   58:int validate(Med m){
       24:   59:    if(m.id < 0)
       24:   59-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 23
        1:   60:        return 1;
        1:   60-block  0
       23:   61:    if(containsOnlyLetters(m.name) == 0)
       23:   61-block  0
call    0 returned 23
branch  1 taken 2 (fallthrough)
branch  2 taken 21
        2:   62:        return 2;
        2:   62-block  0
       21:   63:    if(m.concentration < 0)
       21:   63-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 19
        2:   64:        return 3;
        2:   64-block  0
       19:   65:    if(m.stock < 0)
       19:   65-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 18
        1:   66:        return 4;
        1:   66-block  0
       18:   67:    return 0;
       18:   67-block  0
        -:   68:}
