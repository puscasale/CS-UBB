        -:    0:Source:C:/Users/Ale/Desktop/oop/lab6_7/Service.h
        -:    0:Graph:C:\Users\Ale\Desktop\oop\lab6_7\cmake-build-debug-coverage\CMakeFiles\lab6_7.dir\main.cpp.gcno
        -:    0:Data:C:\Users\Ale\Desktop\oop\lab6_7\cmake-build-debug-coverage\CMakeFiles\lab6_7.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#ifndef LAB6_7_SERVICE_H
        -:    3:#define LAB6_7_SERVICE_H
        -:    4:#include <string>
        -:    5:#include "Activity.h"
        -:    6:#include "Repo.h"
        -:    7:#include "DinamicVector.h"
        -:    8:#include "Validator.h"
        -:    9:#include "Cart.h"
        -:   10:#include <functional>
        -:   11:#include "Undo.h"
        -:   12:#include <memory>
        -:   13:using std::string;
        -:   14:
        -:   15:class ActivityCount {
        -:   16:private:
        -:   17:    int count;
        -:   18:    string type;
        -:   19:public:
        -:   20:    /**
        -:   21:     * Constructor
        -:   22:     */
        -:   23:    ActivityCount() =default;
        -:   24:
        -:   25:    /**
        -:   26:     * Increments the count
        -:   27:     */
        -:   28:    void IncrementCount() {
        -:   29:        count++;
        -:   30:    }
        -:   31:
        -:   32:    /**
        -:   33:     * Returns the count
        -:   34:     */
        -:   35:    int get_count() const{
        -:   36:        return count;
        -:   37:    }
        -:   38:};
        -:   39:
        -:   40:
        -:   41:class Service
        -:   42:{
        -:   43:private:
        -:   44:    RepoAbs& rep;
        -:   45:    Validator& valid;
        -:   46:    Cart cart;
        -:   47:    vector<unique_ptr<Undo>> undo;
        -:   48:public:
        -:   49:    //Service() = default;
        -:   50:
function _ZN7ServiceC1ER7RepoAbsR9Validator called 9 returned 100% blocks executed 100%
        9:   51:    Service(RepoAbs &rep, Validator &valid) : rep{rep }, valid{valid}{};
        9:   51-block  0
call    0 returned 9
call    1 returned 9
        -:   52:    /**
        -:   53:     * Copy constuctor = delete
        -:   54:     */
        -:   55:    Service( const Service& ot) = delete;
        -:   56:
        -:   57:    /**
        -:   58:     * Adds an activity
        -:   59:     * @param name : the name of the activity (string)
        -:   60:     * @param description : the description of the activity (string)
        -:   61:     * @param type : the type of the activity (string)
        -:   62:     * @param time : the time of the activity (int)
        -:   63:     */
        -:   64:    void add(string name, string description, string type, int time);
        -:   65:
        -:   66:    /**
        -:   67:     * Delets an activity by a given index
        -:   68:     * @param index: the given index
        -:   69:     */
        -:   70:    void del(int index);
        -:   71:
        -:   72:    /***
        -:   73:     * Modifies an anctivity by a given index
        -:   74:     * @param new_name : the new name
        -:   75:     * @param new_description : the new description
        -:   76:     * @param new_type : the new type
        -:   77:     * @param new_time : the new time
        -:   78:     * @param index : the given index
        -:   79:     */
        -:   80:    void modify(string new_name, string new_description, string new_type, int new_time, int index);
        -:   81:
        -:   82:    /***
        -:   83:     * Filters the list by a given type
        -:   84:     * @param type : the given type
        -:   85:     * @return : the filtered list
        -:   86:     */
        -:   87:    void filter_type(string type, vector<Activity>& filtered);
        -:   88:
        -:   89:    /***
        -:   90:     * Filters the list by a vigen description
        -:   91:     * @param descr : the given description
        -:   92:     * @return : the filtered list
        -:   93:     */
        -:   94:    void filter_descr(string descr, vector<Activity>& filtered);
        -:   95:
        -:   96:    /***
        -:   97:     * Sorts the list by name
        -:   98:     * @return : the sorted list
        -:   99:     */
        -:  100:     void sort_name(vector<Activity>& copy);
        -:  101:
        -:  102:    /***
        -:  103:     * Sorts the list by description
        -:  104:     * @return : the sorted list
        -:  105:     */
        -:  106:     void  sort_descr(vector<Activity> & copy);
        -:  107:
        -:  108:    /**
        -:  109:     * Sorts the list by type & time
        -:  110:     * @return : the sorted list
        -:  111:     */
        -:  112:     void sort_type_time(vector<Activity> & copy);
        -:  113:
        -:  114:    /***
        -:  115:     * Gets an anctivity by a given index
        -:  116:     * @param index : the given index
        -:  117:     * @return : the activity
        -:  118:     */
        -:  119:    const Activity& get_activity(int index);
        -:  120:
        -:  121:    /**
        -:  122:     * Returns all the activities
        -:  123:     */
        -:  124:    const vector<Activity>& get_all() {
        -:  125:        return rep.get_all();
        -:  126:    }
        -:  127:
        -:  128:
        -:  129:    /**
        -:  130:     * Adds an anctivity with a given name in the cart
        -:  131:     * @param name : the name of the activity
        -:  132:     */
        -:  133:    void add_cart(string name);
        -:  134:
        -:  135:    /**
        -:  136:     * Adds a random amount of activities in the cart
        -:  137:     * @param n : how many activities to add
        -:  138:     * @return : the number of activities added
        -:  139:     */
        -:  140:    int add_random(int n);
        -:  141:
        -:  142:    /**
        -:  143:     * Empties all the activities form the cart
        -:  144:     */
        -:  145:    void empty_cart();
        -:  146:
        -:  147:    /**
        -:  148:     * Gets all the activities form the cart
        -:  149:     * @return
        -:  150:     */
        -:  151:    const vector<Activity>& get_all_cart();
        -:  152:
        -:  153:    /**
        -:  154:     * Makes a raport of all the activities
        -:  155:     * @return : the raport
        -:  156:     */
        -:  157:    std::unordered_map<string ,ActivityCount> raport() const;
        -:  158:
        -:  159:    void export_html(const string& file_name);
        -:  160:
        -:  161:    int Undo();
        -:  162:
        -:  163:    //~Service() = default;
        -:  164:
        -:  165:};
        -:  166:#endif //LAB6_7_SERVICE_H
